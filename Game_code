#include <iostream>
#include <cstdlib>
#include <ctime>
 
//stale - rozmiar tablicy 2D
#define WYS 17
#define SZER 33
//max dlugos imienia
#define DLUGOSC 15
 
//generowanie planszy
void generowanie(char plansza[WYS][SZER]);
//wypisanie planszy
void wypisz_plansze(char plansza[WYS][SZER]);
//wczytywanie ruchu
void wczytaj_ruch(int &lit, int &cyf_1, int &cyf_2);
//uzyskanie odpowiednich wspolrzednych tablicowych
void uzyskaj_indeks(char plansza[WYS][SZER], int lit, int cyf_1, int cyf_2, int &wsp_y, int &wsp_x);
//sprawdzanie czy ktos wygral
int sprawdz_wygrana(char plansza[WYS][SZER], int wsp_y, int wsp_x, int znak);
//losowanie pola dla komputera
void losuj_pole(char plansza[WYS][SZER], int &wsp_y, int &wsp_x);
 
using namespace std;
 
int main() {
 
    srand(time(NULL));
 
    char plansza[WYS][SZER];
    char imie[DLUGOSC];
    int lit, cyf_1, cyf_2, wsp_y, wsp_x;
    lit = cyf_1 = cyf_2 = wsp_y = wsp_x = 0;
 
    generowanie(plansza);
 
    cout << "Podaj imie: ";
    cin >> imie;
    //wczytanie pozostalego znaku w buforze
    cin.get();
 
    while(true) {
        wypisz_plansze(plansza);
 
        cout << "Kolej gracza (" << imie << ")" << endl;
 
        do {
            wczytaj_ruch(lit, cyf_1, cyf_2);
            uzyskaj_indeks(plansza, lit, cyf_1, cyf_2, wsp_y, wsp_x);
        } while(plansza[wsp_y][wsp_x] != ' ');
 
        //aktualizacja widoku
        plansza[wsp_y][wsp_x] = 'x';
        wypisz_plansze(plansza);
 
        if(sprawdz_wygrana(plansza, wsp_y, wsp_x, 'x') == 1) {
            cout << "\nWygrana\n";
            break;
        }
 
        cout << "Kolej komputera" << endl;
 
        losuj_pole(plansza, wsp_y, wsp_x);
        wypisz_plansze(plansza);
 
        if(sprawdz_wygrana(plansza, wsp_y, wsp_x, 'o') == 1) {
            cout << "\nWygrana\n";
            break;
        }
 
    }
 
    return 0;
}
 
void generowanie(char plansza[WYS][SZER]) {
 
    //zmienne pomocniczne
    char kolumna = 'A';
    int wiersz_1 = '5';
    int wiersz_2 = '9';
 
    //przesuwanie sie po wierszach
    for(int i = 0; i < WYS; i++) {
        //przesuwanie sie po kolumnach
        for(int j = 0; j < SZER; j++) {
            //wpisanie oznaczen wierszy
            if(j == 0 && i < 6)
                plansza[i][j] = '1';
            else if(j == 1 && i < 6)
                plansza[i][j] = wiersz_1--;
            else if(j == 0 && i < 15)
                plansza[i][j] = wiersz_2--;
            //wypisanie oznaczen kolumn
            else if(i == WYS-1 && j > 2 && j % 2 != 0)
                plansza[i][j] = kolumna++;
            //wypisanie znakow |
            else if(i < 15 && j % 2 == 0)
                plansza[i][j] = '|';
            else
                plansza[i][j] = ' ';
        }
    }
}
 
void wypisz_plansze(char plansza[WYS][SZER]) {
 
    for(int i = 0; i < WYS; i++) {
        for(int j = 0; j < SZER; j++) {
            cout << plansza[i][j];
        }
        cout << endl;
    }
}
 
void wczytaj_ruch(int &lit, int &cyf_1, int &cyf_2) {
 
    char ruch[3];
 
    do {
        //czyszczenie bufora
        cin.clear();
        cin.sync();
 
        cout << "Gdzie chcesz wstawic pionek: ";
        ruch[0] = getchar();
        ruch[1] = getchar();
        ruch[2] = getchar();
 
        //10 - znak nowej linii
        if(ruch[2] == 10 && ruch[0] >= 65 && ruch[0] <= 79 && ruch[1] >= 49 && ruch[1] <= 57)
            break;
        else if(ruch[0] >= 65 && ruch[0] <= 79 && ruch[1] == '1' && ruch[2] >= 48 && ruch[2] <= 53) {
            cin.get();
            break;
        }
 
    } while(true);
 
    //zapisujemy nasze wybrane wspolrzedne
    lit = ruch[0];
    cyf_1 = ruch[1];
    cyf_2 = ruch[2];
}
 
void uzyskaj_indeks(char plansza[WYS][SZER], int lit, int cyf_1, int cyf_2, int &wsp_y, int &wsp_x) {
 
    //szukanie kolumny
    for(int i = 3; i < SZER; i += 2) {
        if(plansza[WYS-1][i] == lit)
            wsp_x = i;
    }
 
    //szukanie wiersza
    if(cyf_2 == 10) {
        for(int j = 6; j < 16; j++) {
            if(plansza[j][0] == cyf_1)
                wsp_y = j;
        }
    }
    else {
        for(int j = 0; j < 6; j++) {
            if(plansza[j][1] == cyf_2)
                wsp_y = j;
        }
    }
}
 
int sprawdz_wygrana(char plansza[WYS][SZER], int wsp_y, int wsp_x, int znak) {
 
    int licznik = 0;
 
    int i, j;
    i = j = 0;
    //sprawdzanie w poziomie
    for(i = wsp_x+2; plansza[wsp_y][i] == znak; i += 2)
        continue;
    for(j = i - 2; plansza[wsp_y][j] == znak; j -= 2)
        licznik++;
 
    if(licznik >= 5)
        return 1;
 
    //sprawdzanie w pionie
    licznik = 0;
 
    for(i = wsp_y-1; plansza[i][wsp_x] == znak; i--)
        continue;
    for(j = i + 1; plansza[j][wsp_x] == znak; j++)
        licznik++;
 
    if(licznik >= 5)
        return 1;
 
    //sprawdznie po skosie w prawo-gore
    licznik = 0;
 
    for(i = wsp_y-1, j = wsp_x+2; plansza[i][j] == znak; i--, j += 2)
        continue;
    for(i += 1, j -= 2; plansza[i][j] == znak; i++, j -= 2)
        licznik++;
 
    if(licznik >= 5)
        return 1;
 
    //sprawdzanie po skosie w prawo-dol
    licznik = 0;
 
    for(i = wsp_y+1, j = wsp_x+2; plansza[i][j] == znak; i++, j += 2)
        continue;
    for(i -= 1, j -= 2; plansza[i][j] == znak; i--, j -= 2)
        licznik++;
 
    if(licznik >= 5)
        return 1;
 
    return -1;
}
 
void losuj_pole(char plansza[WYS][SZER], int &wsp_y, int &wsp_x) {
 
    do {
        wsp_y = rand() % 15;
        wsp_x = (rand() % 29) + 3;
    } while(plansza[wsp_y][wsp_x] != ' ');
 
    //aktualizacja widoku
    plansza[wsp_y][wsp_x] = 'o';
}
